# vim: ft=sh 
#        __     _     
#   ____/ /__  (_)____
#  / __  / _ \/ / ___/
# / /_/ /  __/ (__  ) 
# \__,_/\___/_/____/  
#                     
#
_deisctl() {
  local cur prev opts base
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"

	commands="install uninstall list start stop restart status scale journal
				config refresh-units ssh dock help upgrade-prep upgrade-takeover
				rolling-restart "

	help_lookup="install uninstall list start stop restart status scale journal
				config refresh-units ssh dock help upgrade-prep upgrade-takeover
				rolling-restart "

	# Usage: deisctl [options] <command> [<args>...]
	#
	# Commands, use "deisctl help <command>" to learn more:
	#   install           install components, or the entire platform
	#   uninstall         uninstall components
	#   list              list installed components
	#   start             start components
	#   stop              stop components
	#   restart           stop, then start components
	#   status            view status of components
	#   scale             grow or shrink the number of routers, registries or store gateways
	#   journal           print the log output of a component
	#   config            set platform or component values
	#   refresh-units     refresh unit files from GitHub
	#   ssh               open an interactive shell on a machine in the cluster
	#   dock              open an interactive shell on a container in the cluster
	#   help              show the help screen for a command
	#   upgrade-prep      prepare a running cluster for upgrade
	#   upgrade-takeover  allow an upgrade to gracefully takeover a running cluster
	#   rolling-restart   perform a rolling restart of a Deis component (currently only router is supported)

	# Options:
	#   -h --help                   show this help screen
	#   --endpoint=<url>            etcd endpoint for fleet [default: http://127.0.0.1:4001]
	#   --etcd-cafile=<path>        etcd CA file authentication [default: ]
	#   --etcd-certfile=<path>      etcd cert file authentication [default: ]
	#   --etcd-key-prefix=<path>    keyspace for fleet data in etcd [default: /_coreos.com/fleet/]
	#   --etcd-keyfile=<path>       etcd key file authentication [default: ]
	#   --known-hosts-file=<path>   where to store remote fingerprints [default: ~/.ssh/known_hosts]
	#   --request-timeout=<secs>    seconds before a request is considered failed [default: 10.0]
	#   --ssh-timeout=<secs>        seconds before SSH connection is considered failed [default: 10.0]
	#   --strict-host-key-checking  verify SSH host keys [default: true]
	#   --tunnel=<host>             SSH tunnel for communication with fleet and etcd [default: ]
	#   --version                   print the version of deisctl
	#

	case "${prev}" in
		help )
			args=$(for word in $help_lookup;do echo "$word";done)
			COMPREPLY=( $(compgen -W "${args}" -- "${cur}") )
			return 0
			;;
    scale )
      items="router= registry= store-gateway="
      COMPREPLY=( $(compgen -W "${items}" -- "${cur}") )
      return 0
      ;;
    config )
      items="platform controller"
      verbs="get set rm"
      COMPREPLY=( $(compgen -W "${items}" -- "${cur}") )
      return 0
      ;;
    start|stop|restart|journal|status )
      components=$(deisctl list |awk '{if (NR!=1) {print $1}}')
      COMPREPLY=( $(compgen -W "${components}" -- "${cur}") )
      return 0
      ;;
    dock )
      components=$(fleetctl list-units --no-legend --fields=unit)
      COMPREPLY=( $(compgen -W "${components}" -- "${cur}") )
      return 0
      ;;
	esac

  COMPREPLY=($(compgen -W "${commands}" -- "${cur}"))
  return 0
}

complete -F _deisctl deisctl

_deis() {
  local cur prev opts base
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"

  commands="help register login logout apps ps config domains builds limits tags releases certs keys perms git users create scale info open logs run destroy pull"
  help_lookup="register login logout apps ps config domains builds limits tags releases certs keys perms git users create scale info open logs run destroy pull"

  # Auth commands::
  #
  # register      register a new user with a controller
  # login         login to a controller
  # logout        logout from the current controller
  #
  # Subcommands, use 'deis help [subcommand]' to learn more::
  #
  # apps          manage applications used to provide services
  # ps            manage processes inside an app container
  # config        manage environment variables that define app config
  # domains       manage and assign domain names to your applications
  # builds        manage builds created using 'git push'
  # limits        manage resource limits for your application
  # tags          manage tags for application containers
  # releases      manage releases of an application
  # certs         manage SSL endpoints for an app
  #
  # keys          manage ssh keys used for 'git push' deployments
  # perms         manage permissions for applications
  # git           manage git for applications
  # users         manage users
  #
  # Shortcut commands, use 'deis shortcuts' to see all::
  #
  # create        create a new application
  # scale         scale processes by type (web=2, worker=1)
  # info          view information about the current app
  # open          open a URL to the app in a browser
  # logs          view aggregated log info for the app
  # run           run a command in an ephemeral app container
  # destroy       destroy an application
  # pull          imports an image and deploys as a new release

  case "${prev}" in
    help )
      args=$(for word in $help_lookup;do echo "$word";done)
      COMPREPLY=( $(compgen -W "${args}" -- "${cur}") )
      return 0
      ;;
    scale )
      COMPREPLY=( $(compgen -W "web= worker= mail= redis=" -- "${cur}") )
      return 0
      ;;
    info )
      COMPREPLY=( $(compgen -W "--app=" -- "${cur}") )
      return 0
      ;;
    -a )
      args=$(deis apps|sed 1d) 
      COMPREPLY=( $(compgen -W "${args}" -- "${cur}") )
      return 0
      ;;
  esac

  COMPREPLY=($(compgen -W "${commands}" -- "${cur}"))
  return 0
}

complete -F _deis deis
